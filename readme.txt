项目简介
index.html  用户输入python 打印报文
python_core.js 通过关键字和语句特征 拼装new_arr 记录每条语句的信息 记录信息尽量详细 比如if的开始行 转折行 结束行 和嵌套关系 因为baowen_core.js中计算上下跳需要
create_baowen.js 通过新的new_arr调用报文解析 有参数的报文在这里进行高低位和十六进制的转换  （原理：通过函数的调用顺序）
baowen_core.js 计算上下跳 报文拼接 并存如最终报文数组  计算上下跳 找规律比如 普通语句的上跳是本身 下跳是下一条指令

tip：较为复杂的比如if语句上跳为false 的开始行  下跳为true的开始行  分支最后一条指令的结束行又为if的结束行+1  
这个需要配合python_core.js传来的数据 进行分析 通过开始行 转折行 内部条数三个参数进行运算求出上下跳并记录 在最后修改 如果直接修改会导致串行等未知影响

important！！！——tip：由于用户输入的没有开始和结束需要自己补 但是会导致个别上下跳串行（如if存储的需要修改的行号会串 +1即可） 自行测试+1就可以解决 

tip：打印出的报文长度不对的情况 ，原因可能是没补0，转十六进制之后也要补0 自行打印检测即可
tip：很多坑比如延时的上跳是本身 变量传的是固定的约定好的索引 如A--00  B--01等

已完成的实例
A=200
while(100):
    if A==203:
        sleep(3)
        aq.equip_motor_alone_control("01","255","360")
        aq.equip_motor_alone_control("01","128","360")
        sleep(2)
    else:
        aq.equip_motor_alone_control("01","90","360")
    A++
whilend
=========================================解析成如下报文 经测试成功 由于后面默认给的是按角度 所以会有停顿 若想按时间不停度sw参数改成1即可======================================================================================
A101000000000000000000000001 开始                    0
A5010000c8000000000000000002 赋值                    1
A321006400000000000000000003 有限循环开始	     2 
A7050500000000cb000000090004 条件语句if ==           3
A402000300000000000000040005 延时3秒                 4
2C01ff0168000100000000000006 电机正转 速度255 360    5
2C01800168000100000000000007 电机停止                6
A40200020000000000000007000a 延时2秒                 7 
A402000100000000000000080009 else 设置为延时1秒(占行)8 
2C015a016800010000000000000a 电机反转 速度90 360     9 
A60600000000000000000000000b 自增                    10
A3A100000000000000000003000c 有限循环结束            11
A20000000000000000000000000c 结束                    12

A101000000000000000000000001
A5010000c8000000000000000002
A321006400000000000000000003
A7050500000000cb000000090004
A402000300000000000000040005
2C01ff0168000100000000000006
2C01800168000100000000000007
A40200020000000000000007000a
A402000100000000000000080009
2C015a016800010000000000000a
A60600000000000000000000000b
A3A100000000000000000003000c
A20000000000000000000000000c